// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  conversations Conversation[]
  prompts       Prompt[]
  userProfile   UserProfile?
  memoryEntries MemoryEntry[]
  semanticMemory SemanticMemory[]
}

model Conversation {
  id          String    @id @default(uuid())
  title       String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // 新增字段：用于保存该会话的固定 Prompt
  systemPrompt String?
  memoryEntries MemoryEntry[]
  semanticMemory SemanticMemory[]
  // 会话重要性评分
  importanceScore Float @default(0)
  // 会话主题标签
  topicTags String[]
}

model Message {
  id             String       @id @default(uuid())
  content        String
  isUser         Boolean
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  fileUrl        String?
  fileType       String?
  fileName       String?
  createdAt      DateTime     @default(now())
  // 保留 prompt 关联字段（若仍需要记录本次发送的 Prompt）
  prompt         String?
  promptName     String?
  // 消息重要性评分
  importanceScore Float @default(0)
  // 消息情感分析
  sentiment      String?
  // 消息主题分类
  topics         String[]
  // 关联的记忆条目
  memoryEntries  MemoryEntry[]
  semanticMemory SemanticMemory[]
}

model Prompt {
  id        String   @id @default(uuid())
  name      String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 用户画像和偏好学习
model UserProfile {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int      @unique
  
  // 用户偏好
  communicationStyle String? // formal, casual, technical, etc.
  preferredTopics   String[] // 用户感兴趣的话题
  languageStyle     String?  // verbose, concise, detailed, etc.
  
  // 行为分析
  avgSessionLength  Int     @default(0) // 平均会话长度（消息数）
  totalSessions     Int     @default(0) // 总会话数
  mostActiveHours   String[] // 最活跃时间段
  
  // 学习偏好
  learningPatterns  Json?    // 学习模式和偏好
  knowledgeAreas    String[] // 知识领域
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// 语义记忆系统
model SemanticMemory {
  id                String       @id @default(uuid())
  user              User         @relation(fields: [userId], references: [id])
  userId            Int
  conversation      Conversation? @relation(fields: [conversationId], references: [id])
  conversationId    String?
  message           Message?     @relation(fields: [messageId], references: [id])
  messageId         String?
  
  // 核心内容
  content           String       // 原始内容
  summary           String       // 内容摘要
  keywords          String[]     // 关键词
  entities          String[]     // 实体提取
  
  // 向量嵌入
  embedding         Float[]      // 向量表示
  embeddingModel    String       // 使用的嵌入模型
  
  // 重要性和相关性
  importanceScore   Float        @default(0)
  accessCount       Int          @default(0)
  lastAccessed      DateTime     @default(now())
  
  // 分类和标签
  category          String?      // 知识分类
  tags              String[]     // 标签
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // 关联其他记忆
  relatedMemories   MemoryRelation[] @relation("FromMemory")
  referencedBy      MemoryRelation[] @relation("ToMemory")
}

// 记忆条目 - 结构化记忆存储
model MemoryEntry {
  id                String       @id @default(uuid())
  user              User         @relation(fields: [userId], references: [id])
  userId            Int
  conversation      Conversation? @relation(fields: [conversationId], references: [id])
  conversationId    String?
  message           Message?     @relation(fields: [messageId], references: [id])
  messageId         String?
  
  // 记忆类型
  type              MemoryType   // 记忆类型枚举
  
  // 记忆内容
  title             String       // 记忆标题
  content           String       // 记忆内容
  context           String?      // 上下文信息
  
  // 重要性和生命周期
  importanceScore   Float        @default(0)
  decayRate         Float        @default(0.1) // 遗忘率
  reinforcements    Int          @default(0)   // 强化次数
  
  // 访问统计
  accessCount       Int          @default(0)
  lastAccessed      DateTime     @default(now())
  
  // 记忆状态
  isActive          Boolean      @default(true)
  expiresAt         DateTime?    // 过期时间
  
  // 关联信息
  tags              String[]     // 标签
  relatedTopics     String[]     // 相关话题
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

// 记忆关联关系
model MemoryRelation {
  id                String         @id @default(uuid())
  fromMemory        SemanticMemory @relation("FromMemory", fields: [fromMemoryId], references: [id])
  fromMemoryId      String
  toMemory          SemanticMemory @relation("ToMemory", fields: [toMemoryId], references: [id])
  toMemoryId        String
  
  // 关系类型和强度
  relationType      String         // cause, effect, similar, opposite, etc.
  strength          Float          @default(1.0)
  
  createdAt         DateTime       @default(now())
  
  @@unique([fromMemoryId, toMemoryId])
}

// 记忆类型枚举
enum MemoryType {
  FACT           // 事实性记忆
  PREFERENCE     // 偏好记忆
  GOAL           // 目标记忆
  EXPERIENCE     // 经验记忆
  KNOWLEDGE      // 知识记忆
  EMOTIONAL      // 情感记忆
  BEHAVIORAL     // 行为模式记忆
}
